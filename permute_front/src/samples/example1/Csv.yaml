# This file defines the schema for an employment record sink.
# Permute framework will use this schema to validate the data sink, which should be
# registered from the implementation code. If this schema is not compatible with the registered
# data sink, the framework will raise an error.
# So this file is a contract between the implementation code and the configuration file.
#
# The reason it is done that way is to allow the implementation code to be decoupled from the
# configuration file. Also, any Permute validators would be able to validate YAML configuration
# without knowing the implementation specifics.

permute:
  version: 0.1
  type: sink # This file describes a sink, to which data can be written.
  use:
    - crate::csv_sink::*
    - chrono::NaiveDate
    - std::any::Any

param:
  path:
    type: String
    explain: Path to the CSV file to write to.
  date_fmt:
    type: Box<dyn Fn(NaiveDate) -> String> # Boxed dynamic function.
    explain: Function to format a date as a string.
  none_fmt:
    type: Box<dyn Fn(&dyn Any) -> String>
    default: | # Default value is a lambda function.
      |_| String::new()
    explain: Function to format None values of any type.
  row_sequence:
    type: RowSequence
    default: RowSequence::new(1)
    explain: Generator for a sequence of row numbers.
  header:
    type: Option<Vec<String>>
    default: None
    explain: Optional header row for the CSV file.
    check:
      - define: self?.len() > 0
        explain: The header row must be defined if it is not None.
  delimiter:
    type: String
    default: |
      ","
    explain: Delimiter to use between fields in the CSV file.
    check: self.len() >= 1
  eol:
    type: String
    default: |
      '\n'
    explain: End of line character to use at the end of each row.
    check: self.len() >= 1 

# Checks that are performed on the parameters.
# Those that cannot be defined in the parameter definitions because they
# operate on multiple parameters.
check:
  - explain: The header row must have the same number of fields as the write functions.
    define: self.header?.len() == self.write.len()
